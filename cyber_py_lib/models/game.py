# coding: utf-8

"""
    Cyber Wars API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Game(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'player_number': 'int',
        'turn_number': 'int',
        'map': 'GameMap'
    }

    attribute_map = {
        'id': 'id',
        'player_number': 'playerNumber',
        'turn_number': 'turnNumber',
        'map': 'map'
    }

    def __init__(self, id=None, player_number=None, turn_number=None, map=None):  # noqa: E501
        """Game - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._player_number = None
        self._turn_number = None
        self._map = None
        self.discriminator = None

        self.id = id
        self.player_number = player_number
        self.turn_number = turn_number
        self.map = map

    @property
    def id(self):
        """Gets the id of this Game.  # noqa: E501


        :return: The id of this Game.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Game.


        :param id: The id of this Game.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def player_number(self):
        """Gets the player_number of this Game.  # noqa: E501


        :return: The player_number of this Game.  # noqa: E501
        :rtype: int
        """
        return self._player_number

    @player_number.setter
    def player_number(self, player_number):
        """Sets the player_number of this Game.


        :param player_number: The player_number of this Game.  # noqa: E501
        :type: int
        """
        if player_number is None:
            raise ValueError("Invalid value for `player_number`, must not be `None`")  # noqa: E501
        if player_number is not None and player_number < 1:  # noqa: E501
            raise ValueError("Invalid value for `player_number`, must be a value greater than or equal to `1`")  # noqa: E501

        self._player_number = player_number

    @property
    def turn_number(self):
        """Gets the turn_number of this Game.  # noqa: E501


        :return: The turn_number of this Game.  # noqa: E501
        :rtype: int
        """
        return self._turn_number

    @turn_number.setter
    def turn_number(self, turn_number):
        """Sets the turn_number of this Game.


        :param turn_number: The turn_number of this Game.  # noqa: E501
        :type: int
        """
        if turn_number is None:
            raise ValueError("Invalid value for `turn_number`, must not be `None`")  # noqa: E501
        if turn_number is not None and turn_number < 0:  # noqa: E501
            raise ValueError("Invalid value for `turn_number`, must be a value greater than or equal to `0`")  # noqa: E501

        self._turn_number = turn_number

    @property
    def map(self):
        """Gets the map of this Game.  # noqa: E501


        :return: The map of this Game.  # noqa: E501
        :rtype: GameMap
        """
        return self._map

    @map.setter
    def map(self, map):
        """Sets the map of this Game.


        :param map: The map of this Game.  # noqa: E501
        :type: GameMap
        """
        if map is None:
            raise ValueError("Invalid value for `map`, must not be `None`")  # noqa: E501

        self._map = map

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Game):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
