# coding: utf-8

"""
    Cyber Wars API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Unit(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'attack': 'int',
        'defense': 'int',
        'health': 'int',
        'unit_type': 'str',
        'min_range': 'int',
        'max_range': 'int',
        'current_ap': 'int',
        'max_ap': 'int',
        'ap_regen': 'int',
        'owner': 'int',
        'coordinates': 'Coordinates'
    }

    attribute_map = {
        'id': 'id',
        'attack': 'attack',
        'defense': 'defense',
        'health': 'health',
        'unit_type': 'unitType',
        'min_range': 'minRange',
        'max_range': 'maxRange',
        'current_ap': 'currentAP',
        'max_ap': 'maxAP',
        'ap_regen': 'apRegen',
        'owner': 'owner',
        'coordinates': 'coordinates'
    }

    def __init__(self, id=None, attack=None, defense=None, health=None, unit_type=None, min_range=None, max_range=None, current_ap=None, max_ap=None, ap_regen=None, owner=None, coordinates=None):  # noqa: E501
        """Unit - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._attack = None
        self._defense = None
        self._health = None
        self._unit_type = None
        self._min_range = None
        self._max_range = None
        self._current_ap = None
        self._max_ap = None
        self._ap_regen = None
        self._owner = None
        self._coordinates = None
        self.discriminator = None

        self.id = id
        self.attack = attack
        self.defense = defense
        self.health = health
        self.unit_type = unit_type
        self.min_range = min_range
        self.max_range = max_range
        if current_ap is not None:
            self.current_ap = current_ap
        if max_ap is not None:
            self.max_ap = max_ap
        if ap_regen is not None:
            self.ap_regen = ap_regen
        self.owner = owner
        if coordinates is not None:
            self.coordinates = coordinates

    @property
    def id(self):
        """Gets the id of this Unit.  # noqa: E501


        :return: The id of this Unit.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Unit.


        :param id: The id of this Unit.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def attack(self):
        """Gets the attack of this Unit.  # noqa: E501


        :return: The attack of this Unit.  # noqa: E501
        :rtype: int
        """
        return self._attack

    @attack.setter
    def attack(self, attack):
        """Sets the attack of this Unit.


        :param attack: The attack of this Unit.  # noqa: E501
        :type: int
        """
        if attack is None:
            raise ValueError("Invalid value for `attack`, must not be `None`")  # noqa: E501
        if attack is not None and attack < 0:  # noqa: E501
            raise ValueError("Invalid value for `attack`, must be a value greater than or equal to `0`")  # noqa: E501

        self._attack = attack

    @property
    def defense(self):
        """Gets the defense of this Unit.  # noqa: E501


        :return: The defense of this Unit.  # noqa: E501
        :rtype: int
        """
        return self._defense

    @defense.setter
    def defense(self, defense):
        """Sets the defense of this Unit.


        :param defense: The defense of this Unit.  # noqa: E501
        :type: int
        """
        if defense is None:
            raise ValueError("Invalid value for `defense`, must not be `None`")  # noqa: E501
        if defense is not None and defense < 0:  # noqa: E501
            raise ValueError("Invalid value for `defense`, must be a value greater than or equal to `0`")  # noqa: E501

        self._defense = defense

    @property
    def health(self):
        """Gets the health of this Unit.  # noqa: E501


        :return: The health of this Unit.  # noqa: E501
        :rtype: int
        """
        return self._health

    @health.setter
    def health(self, health):
        """Sets the health of this Unit.


        :param health: The health of this Unit.  # noqa: E501
        :type: int
        """
        if health is None:
            raise ValueError("Invalid value for `health`, must not be `None`")  # noqa: E501
        if health is not None and health < 0:  # noqa: E501
            raise ValueError("Invalid value for `health`, must be a value greater than or equal to `0`")  # noqa: E501

        self._health = health

    @property
    def unit_type(self):
        """Gets the unit_type of this Unit.  # noqa: E501


        :return: The unit_type of this Unit.  # noqa: E501
        :rtype: str
        """
        return self._unit_type

    @unit_type.setter
    def unit_type(self, unit_type):
        """Sets the unit_type of this Unit.


        :param unit_type: The unit_type of this Unit.  # noqa: E501
        :type: str
        """
        if unit_type is None:
            raise ValueError("Invalid value for `unit_type`, must not be `None`")  # noqa: E501
        allowed_values = ["magic", "swords", "guns"]  # noqa: E501
        if unit_type not in allowed_values:
            raise ValueError(
                "Invalid value for `unit_type` ({0}), must be one of {1}"  # noqa: E501
                .format(unit_type, allowed_values)
            )

        self._unit_type = unit_type

    @property
    def min_range(self):
        """Gets the min_range of this Unit.  # noqa: E501


        :return: The min_range of this Unit.  # noqa: E501
        :rtype: int
        """
        return self._min_range

    @min_range.setter
    def min_range(self, min_range):
        """Sets the min_range of this Unit.


        :param min_range: The min_range of this Unit.  # noqa: E501
        :type: int
        """
        if min_range is None:
            raise ValueError("Invalid value for `min_range`, must not be `None`")  # noqa: E501
        if min_range is not None and min_range < 0:  # noqa: E501
            raise ValueError("Invalid value for `min_range`, must be a value greater than or equal to `0`")  # noqa: E501

        self._min_range = min_range

    @property
    def max_range(self):
        """Gets the max_range of this Unit.  # noqa: E501


        :return: The max_range of this Unit.  # noqa: E501
        :rtype: int
        """
        return self._max_range

    @max_range.setter
    def max_range(self, max_range):
        """Sets the max_range of this Unit.


        :param max_range: The max_range of this Unit.  # noqa: E501
        :type: int
        """
        if max_range is None:
            raise ValueError("Invalid value for `max_range`, must not be `None`")  # noqa: E501
        if max_range is not None and max_range < 0:  # noqa: E501
            raise ValueError("Invalid value for `max_range`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_range = max_range

    @property
    def current_ap(self):
        """Gets the current_ap of this Unit.  # noqa: E501


        :return: The current_ap of this Unit.  # noqa: E501
        :rtype: int
        """
        return self._current_ap

    @current_ap.setter
    def current_ap(self, current_ap):
        """Sets the current_ap of this Unit.


        :param current_ap: The current_ap of this Unit.  # noqa: E501
        :type: int
        """
        if current_ap is not None and current_ap < 0:  # noqa: E501
            raise ValueError("Invalid value for `current_ap`, must be a value greater than or equal to `0`")  # noqa: E501

        self._current_ap = current_ap

    @property
    def max_ap(self):
        """Gets the max_ap of this Unit.  # noqa: E501


        :return: The max_ap of this Unit.  # noqa: E501
        :rtype: int
        """
        return self._max_ap

    @max_ap.setter
    def max_ap(self, max_ap):
        """Sets the max_ap of this Unit.


        :param max_ap: The max_ap of this Unit.  # noqa: E501
        :type: int
        """
        if max_ap is not None and max_ap < 0:  # noqa: E501
            raise ValueError("Invalid value for `max_ap`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_ap = max_ap

    @property
    def ap_regen(self):
        """Gets the ap_regen of this Unit.  # noqa: E501


        :return: The ap_regen of this Unit.  # noqa: E501
        :rtype: int
        """
        return self._ap_regen

    @ap_regen.setter
    def ap_regen(self, ap_regen):
        """Sets the ap_regen of this Unit.


        :param ap_regen: The ap_regen of this Unit.  # noqa: E501
        :type: int
        """
        if ap_regen is not None and ap_regen < 0:  # noqa: E501
            raise ValueError("Invalid value for `ap_regen`, must be a value greater than or equal to `0`")  # noqa: E501

        self._ap_regen = ap_regen

    @property
    def owner(self):
        """Gets the owner of this Unit.  # noqa: E501


        :return: The owner of this Unit.  # noqa: E501
        :rtype: int
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Unit.


        :param owner: The owner of this Unit.  # noqa: E501
        :type: int
        """
        if owner is None:
            raise ValueError("Invalid value for `owner`, must not be `None`")  # noqa: E501
        if owner is not None and owner < 1:  # noqa: E501
            raise ValueError("Invalid value for `owner`, must be a value greater than or equal to `1`")  # noqa: E501

        self._owner = owner

    @property
    def coordinates(self):
        """Gets the coordinates of this Unit.  # noqa: E501


        :return: The coordinates of this Unit.  # noqa: E501
        :rtype: Coordinates
        """
        return self._coordinates

    @coordinates.setter
    def coordinates(self, coordinates):
        """Sets the coordinates of this Unit.


        :param coordinates: The coordinates of this Unit.  # noqa: E501
        :type: Coordinates
        """

        self._coordinates = coordinates

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Unit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
